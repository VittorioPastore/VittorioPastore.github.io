---
// Astro front matter remains the same
import '@fontsource/poppins';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <!-- Added viewport-fit=cover to handle safe areas -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <!-- SEO Metadata -->
    <meta name="description" content="Vittorio Pastore's personal website and portfolio showcasing robotics engineering projects and skills" />
    <meta name="keywords" content="software engineer, full stack developer, AI, Reinforcement Learning, software development, portfolio" />
    <meta name="author" content="Vittorio Pastore" />
  </head>

  <body>
    <!-- Fixed background container for smooth transitioning -->
    <div class="fixed-background"></div>
    <div class="stars"></div>
    <div class="glow-orb"></div>
    <!-- Subtle Centered Toggle Button -->
    <button
      type="button"
      id="theme-toggle"
      class="absolute top-4 left-1/2 -translate-x-1/2 toggle-button glass px-3 py-1.5 rounded-full transition-all duration-300 z-50 opacity-70 hover:opacity-90 flex items-center gap-1 text-sm">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 theme-toggle-icon" viewBox="0 0 24 24" stroke="currentColor" fill="none">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
      </svg>
      <span class="text-sm font-medium">Toggle Theme</span>
    </button>

    <!-- Page Content -->
    <slot />

    <!-- Home Button -->
    <a
      href="/"
      id="home-button"
      class="fixed bottom-8 left-1/2 -translate-x-1/2 glass px-6 py-3 rounded-full text-white font-medium 
             hover:bg-white/20 transition-all duration-300 flex items-center gap-2 z-50 translate-y-0"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        class="w-5 h-5"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 
             .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 
             1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"
        />
      </svg>
      Home
    </a>

    <!-- Scroll & Link Scripts -->
    <script>
      // Theme handling
      const html = document.documentElement;
      const themeToggle = document.getElementById('theme-toggle');
      const themeIcon = themeToggle?.querySelector('.theme-toggle-icon');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
      
      const updateThemeUI = (isDark) => {
        if (themeIcon) {
          if (isDark) {
            // Show sun icon when in dark mode (click to switch to light)
            themeIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                     d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>`;
          } else {
            // Show moon icon when in light mode (click to switch to dark)
            themeIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                     d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>`;
          }
        }
      };

      const setTheme = (isDark) => {
        html.classList.toggle('light-mode', !isDark);
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        updateThemeUI(isDark);
      };

      // Initialize theme
      const savedTheme = localStorage.getItem('theme');
      const initialTheme = savedTheme ? savedTheme === 'dark' : prefersDark.matches;
      setTheme(initialTheme);

      // Toggle the theme on button click
      themeToggle?.addEventListener('click', () => {
        const currentDark = !(html.classList.contains('light-mode'));
        setTheme(!currentDark);
      });

      // Listen for system theme changes
      prefersDark.addEventListener('change', (e) => {
        setTheme(e.matches);
      });

      let lastScrollY = window.scrollY;
      let ticking = false;

      const homeButton = document.getElementById('home-button');
      
      const updateHomeButton = () => {
        if (!homeButton) return;
        
        const currentScrollY = window.scrollY;
        
        if (currentScrollY > lastScrollY) {
          // Scrolling down
          homeButton.style.transform = 'translate(-50%, 150%)';
        } else {
          // Scrolling up
          homeButton.style.transform = 'translate(-50%, 0)';
        }
        
        lastScrollY = currentScrollY;
        ticking = false;
      };

      const onScroll = () => {
        if (!ticking) {
          window.requestAnimationFrame(updateHomeButton);
          ticking = true;
        }
      };

      // Add scroll event listener
      window.addEventListener('scroll', onScroll, { passive: true });

      // Smooth scroll handler for internal links
      const smoothScroll = (e) => {
        const targetId = e.currentTarget.getAttribute('href');
        if (targetId && targetId.startsWith('#')) {
          e.preventDefault();
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        }
      };

      // Add click handlers to all internal links
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', smoothScroll);
        });
      });
    </script>
  </body>
</html>

<style is:global>
  /* Base styles for html and body */
  html {
    height: 100%;
    margin: 0;
    padding: 0;
    background-color: #000;
    /* iOS Safari full-screen */
    height: -webkit-fill-available;
  }

  body {
    display: flex;
    flex-direction: column;
    max-width: 1440px;
    margin: 0 auto;
    padding: 0;
    padding-bottom: env(safe-area-inset-bottom);
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    color: white;
    background-color: transparent;
    transition: color 0.3s ease;
    height: 100vh;
    height: -webkit-fill-available;
  }

  .light-mode body {
    color: black;
  }

  /* Glass/translucent styling */
  .glass {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  .light-mode .glass {
    background: rgba(255, 255, 255, 0.3);
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  /* Fixed background container using pseudo-elements for smooth cross-fade */
  .fixed-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    /* Ensure the background is behind content */
    z-index: -1;
    pointer-events: none;
    background: none;
  }

  .fixed-background::before,
  .fixed-background::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-size: cover;
    background-position: center;
    transition: opacity 0.5s ease-in-out;
  }

  /* Dark theme background (default) */
  .fixed-background::before {
    background-image: url('/back3.jpg');
    opacity: 1;
  }

  /* Light theme background */
  .fixed-background::after {
    background-image: url('/back5.png');
    opacity: 0;
  }

  /* When light mode is active, swap opacities */
  html.light-mode .fixed-background::before {
    opacity: 0;
  }
  html.light-mode .fixed-background::after {
    opacity: 1;
  }

  /*
    iOS Safari fallback: change background-attachment if needed.
  */
  @supports (-webkit-touch-callout: none) {
    .fixed-background {
      background-attachment: scroll;
    }
  }

  /* Star layer (decorative) */
  .stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: 
      radial-gradient(2px 2px at 20px 30px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 40px 70px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 50px 160px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 90px 40px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 130px 80px, #fff, rgba(0,0,0,0));
    background-size: 200px 200px;
    animation: twinkle 5s ease-in-out infinite;
  }

  .light-mode .stars {
    opacity: 0;
  }

  /* Glow orb layer (decorative) */
  .glow-orb {
    position: fixed;
    top: 15%;
    left: 85%;
    transform: translate(-50%, -50%);
    width: 600px;
    height: 600px;
    border-radius: 50%;
    background: radial-gradient(circle at center, rgba(255,182,255,0.4) 0%, rgba(255,182,255,0) 70%);
    pointer-events: none;
    z-index: 0;
    animation: float 20s ease-in-out infinite;
    filter: blur(30px);
  }

  .light-mode .glow-orb {
    background: radial-gradient(circle at center, rgba(100,149,237,0.4) 0%, rgba(100,149,237,0) 70%);
  }

  /* Twinkling animation for stars */
  @keyframes twinkle {
    0% { opacity: 0.7; }
    50% { opacity: 1; }
    100% { opacity: 0.7; }
  }

  /* Floating animation for the glow orb */
  @keyframes float {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    50% { transform: translate(-30%, -30%) rotate(180deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Floating effect for any elements with this class */
  .float {
    animation: contentFloat 6s ease-in-out infinite;
  }

  @keyframes contentFloat {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
    100% { transform: translateY(0px); }
  }

  /* Gradient text helper class */
  .text-gradient {
    background: linear-gradient(to right, #B388FF, #7FDBFF, #FFB6C1);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  /* Override text colors when in light mode */
  html.light-mode body,
  html.light-mode h1,
  html.light-mode h2,
  html.light-mode h3,
  html.light-mode h4,
  html.light-mode h5,
  html.light-mode h6,
  html.light-mode p,
  html.light-mode a,
  html.light-mode li,
  html.light-mode span {
    color: black !important;
  }

  /* Optionally override common Tailwind text classes if needed */
  html.light-mode .text-gray-200 {
    color: #222 !important;
  }
  html.light-mode .text-white {
    color: #000 !important;
  }
</style>
