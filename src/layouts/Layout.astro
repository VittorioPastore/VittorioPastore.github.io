---
import '@fontsource/poppins';

interface Props {
  title: string;
}

const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <!-- SEO Metadata -->
    <meta name="description" content="Vittorio Pastore's personal website and portfolio showcasing robotics engineering projects and skills" />
    <meta name="keywords" content="software engineer, full stack developer, AI, Reinforcement Learning, software development, portfolio" />
    <meta name="author" content="Vittorio Pastore" />
  </head>

  <body class="min-h-screen font-poppins text-white">   
    <div class="fixed-background"></div>
    <div class="stars"></div>
    <div class="glow-orb"></div>
    <slot />

    <!-- Home Button -->
    <a
      href="/"
      id="home-button"
      class="fixed bottom-8 left-1/2 -translate-x-1/2 glass px-6 py-3 rounded-full text-white font-medium 
             hover:bg-white/20 transition-all duration-300 flex items-center gap-2 z-50 translate-y-0"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        class="w-5 h-5"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25"
        />
      </svg>
      Home
    </a>
  </body>
</html>

<script>
  let lastScrollY = window.scrollY;
  let ticking = false;

  const homeButton = document.getElementById('home-button');
  
  const updateHomeButton = () => {
    if (!homeButton) return;
    
    const currentScrollY = window.scrollY;
    
    if (currentScrollY > lastScrollY) {
      // Scrolling down
      homeButton.style.transform = 'translate(-50%, 150%)';
    } else {
      // Scrolling up
      homeButton.style.transform = 'translate(-50%, 0)';
    }
    
    lastScrollY = currentScrollY;
    ticking = false;
  };

  const onScroll = () => {
    if (!ticking) {
      window.requestAnimationFrame(updateHomeButton);
      ticking = true;
    }
  };

  // Add scroll event listener
  window.addEventListener('scroll', onScroll, { passive: true });

  // Smooth scroll handler
  const smoothScroll = (e) => {
    const targetId = e.currentTarget.getAttribute('href');
    if (targetId && targetId.startsWith('#')) {
      e.preventDefault();
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      }
    }
  };

  // Add click handlers to all internal links
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', smoothScroll);
    });
  });
</script>

<style is:global>
  .glass {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }
  
  .fixed-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('/back3.jpg') no-repeat center center;
    background-size: cover;
    z-index: -1;
  }

  @supports (-webkit-touch-callout: none) {
    .fixed-background {
      background-attachment: scroll;
    }
  }

  .stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: 
      radial-gradient(2px 2px at 20px 30px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 40px 70px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 50px 160px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 90px 40px, #fff, rgba(0,0,0,0)),
      radial-gradient(2px 2px at 130px 80px, #fff, rgba(0,0,0,0));
    background-size: 200px 200px;
    animation: twinkle 5s ease-in-out infinite;
  }
  .glow-orb {
    position: fixed;
    top: 15%;
    left: 85%;
    transform: translate(-50%, -50%);
    width: 600px;
    height: 600px;
    border-radius: 50%;
    background: radial-gradient(circle at center, rgba(255,182,255,0.4) 0%, rgba(255,182,255,0) 70%);
    pointer-events: none;
    z-index: 0;
    animation: float 20s ease-in-out infinite;
    filter: blur(30px);
  }

  @keyframes twinkle {
    0% { opacity: 0.7; }
    50% { opacity: 1; }
    100% { opacity: 0.7; }
  }

  @keyframes float {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    50% { transform: translate(-30%, -30%) rotate(180deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  .float {
    animation: contentFloat 6s ease-in-out infinite;
  }

  @keyframes contentFloat {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
    100% { transform: translateY(0px); }
  }

  .text-gradient {
    background: linear-gradient(to right, #B388FF, #7FDBFF, #FFB6C1);    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
</style>
